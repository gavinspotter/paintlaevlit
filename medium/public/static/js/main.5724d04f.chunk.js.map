{"version":3,"sources":["shared/hooks/auth-hook.js","shared/components/FormElements/Button.js","shared/components/FormElements/Input.js","shared/components/UIElements/Modal.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/LoadingSpinner.js","shared/context/auth-context.js","shared/hooks/http-hook.js","paints/pages/NewPaint.js","shared/components/UIElements/Card.js","paints/components/PaintItem.js","paints/components/PaintList.js","paints/pages/Paint.js","paints/pages/UpdatePaint.js","receivedpaints/components/RPItem.js","receivedpaints/components/RPList.js","receivedpaints/pages/ReceivedPaint.js","sendpaints/pages/SendPaint.js","sendpaints/components/SPItem.js","sendpaints/components/SPList.js","sendpaints/pages/SentPaint.js","shared/components/navigation/Background.js","shared/components/navigation/SassNav.js","user/pages/Auth.js","user/pages/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["logoutTimer","Button","props","to","exact","className","size","inverse","danger","children","type","onClick","disabled","Input","element","name","ref","valRef","defaultValue","dv","rows","label","ModalOverlay","content","style","headerClass","header","onSubmit","event","preventDefault","contentClass","footerClass","footer","ReactDOM","createPortal","document","getElementById","Modal","CSSTransition","in","show","mountOnEnter","unmountOnExit","timeout","classNames","ErrorModal","onCancel","onClear","error","LoadingSpinner","asOverlay","AuthContext","createContext","isLoggedIn","userId","token","login","logout","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","NewPaint","auth","useContext","useForm","register","handleSubmit","history","useHistory","data","process","JSON","stringify","paintname","paintcode","storecode","paintbrand","base","creator","Authorization","console","log","Fragment","Card","PaintItem","showConfirmModal","setShowConfirmModal","cancelDeleteHandler","confirmDeleteHandler","id","onDelete","PaintList","items","length","map","paint","Paint","loadedPaint","setLoadedPaint","useParams","paints","fetchPaints","deletedPaintId","prevPaints","UpdatePaint","paintId","loadedPaintname","setLoadedPaintname","loadedPaintcode","setLoadedPaintcode","loadedPaintbrand","setLoadedPaintbrand","loadedBase","setLoadedBase","loadedStorecode","setLoadedStorecode","fetchPaint","RPItem","RPList","ReceivedPaint","receivedpaint","SendPaint","email","rd","user","sender","receiver","SPItem","SPList","SentPaint","sentpaint","Background","SassNav","handleClick","click","for","Auth","password","Signup","asOverylay","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.5724d04f.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(false);\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n        const tokenExpirationDate =\n            expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem(\n            'userData',\n            JSON.stringify({\n                userId: uid,\n                token: token,\n                expiration: tokenExpirationDate.toISOString()\n            })\n        );\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setTokenExpirationDate(null);\n        setUserId(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n        if (token && tokenExpirationDate) {\n            const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n            logoutTimer = setTimeout(logout, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, logout, tokenExpirationDate]);\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        if (\n            storedData &&\n            storedData.token &&\n            new Date(storedData.expiration) > new Date()\n        ) {\n            login(storedData.userId, storedData.token, new Date(storedData.expiration));\n        }\n    }, [login]);\n\n    return { token, login, logout, userId };\n};","import React from \"react\"\nimport {Link} from \"react-router-dom\"\n\nimport \"./Button.css\"\n\n\nconst Button = (props) => {\n    if (props.to) {\n        return (\n          <Link\n            to={props.to}\n            exact={props.exact}\n            className={`button button--${props.size || 'default'} ${props.inverse &&\n              'button--inverse'} ${props.danger && 'button--danger'}`}\n          >\n            {props.children}\n          </Link>\n        );\n      }\n\n      return (\n        <button\n          className={`button button--${props.size || 'default'} ${props.inverse &&\n            'button--inverse'} ${props.danger && 'button--danger'}`}\n          type={props.type}\n          onClick={props.onClick}\n          disabled={props.disabled}\n        >\n          {props.children}\n        </button>\n      );\n}\n\nexport default Button\n","import React from \"react\"\n\nconst Input = (props) => {\n\n    const element = props.element === \"input\" ? (\n        <input\n            name={props.name}\n            ref={props.valRef}\n            type={props.type}\n            defaultValue={props.dv}\n\n        />\n    ) : (\n            <textarea\n                rows={props.rows || 3}\n                ref={props.valRef}\n                name={props.name}\n            />\n        )\n\n    return (\n        <div>\n            <label>\n                {props.label}\n            </label> <br />\n            {element}\n\n        </div>\n    )\n}\n\nexport default Input","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport {CSSTransition} from \"react-transition-group\"\n\nimport \"./Modal.css\"\n\nconst ModalOverlay = (props) => {\n    const content = (\n        <div className={`modal ${props.className}`} style={props.style}>\n          <header className={`modal__header ${props.headerClass}`}>\n            <h2>{props.header}</h2>\n          </header>\n          <form\n            onSubmit={\n              props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n            }\n          >\n            <div className={`modal__content ${props.contentClass}`}>\n              {props.children}\n            </div>\n            <footer className={`modal__footer ${props.footerClass}`}>\n              {props.footer}\n            </footer>\n          </form>\n        </div>\n      );\n\n      return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\n}\n\nconst Modal = (props) => {\n    return (\n        \n            <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n      \n    )\n}\n\nexport default Modal","import React from \"react\"\nimport Button from \"../FormElements/Button\"\n\nimport Modal from \"./Modal\"\n\nconst ErrorModal = props => {\n\n    return (\n        <Modal\n        onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}> okay </Button>}\n        >\n            <p>{props.error}</p>\n        </Modal>\n    )\n}\n\nexport default ErrorModal\n\n","import React from \"react\"\n\nimport \"./LoadingSpinner.css\"\n\nconst LoadingSpinner = props => {\n    return (\n        <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n          <div className=\"lds-dual-ring\"></div>\n        </div>\n      );\n}\n\nexport default LoadingSpinner","import { createContext } from \"react\"\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    login: () => { },\n    logout: () => { }\n})","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async (url, method = \"GET\", body = null, headers = {}) => {\n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal,\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\n        );\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};","import React, { useContext } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { useHistory } from \"react-router-dom\"\nimport Button from \"../../shared/components/FormElements/Button\"\nimport Input from \"../../shared/components/FormElements/Input\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport \"./PaintForm.css\"\nimport \"../../css/style.css\"\n\nconst NewPaint = () => {\n    const auth = useContext(AuthContext)\n\n    const { register, handleSubmit } = useForm()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const history = useHistory()\n\n    const onSubmit = async (data) => {\n        try {\n            await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/paints\",\n                \"POST\",\n                JSON.stringify({\n                    paintname: data.paintname,\n                    // roomdimensions: {\n                    //     height: data.height,\n                    //     width: data.width,\n                    //     walls: data.walls\n                    // },\n                    paintcode: data.paintcode,\n                    storecode: data.storecode,\n                    paintbrand: data.paintbrand,\n                    base: data.base,\n                    // room: data.room,\n                    creator: auth.userId\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n            history.push(\"/paint/new\")\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <div className=\"newpaint__card\">\n                <h2>save paint</h2>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <Input\n                        name=\"paintname\"\n                        valRef={register}\n                        label=\"name\"\n                        element=\"input\"\n                    />\n\n                    <Input\n                        name=\"paintcode\"\n                        valRef={register}\n                        label=\"paint code\"\n                        element=\"input\"\n                    />\n\n                    <Input\n                        name=\"paintbrand\"\n                        valRef={register}\n                        label=\"brand\"\n                        element=\"input\"\n                    />\n\n                    <Input\n                        name=\"base\"\n                        valRef={register}\n                        label=\"base\"\n                        element=\"input\"\n                    />\n\n                    {/* <Input\n                        name=\"room\"\n                        valRef={register}\n                        label=\"room\"\n                        element=\"input\"\n\n                    /> */}\n\n                    {/* <Input\n                        name=\"width\"\n                        valRef={register}\n                        label=\"wall width\"\n                        element=\"input\"\n                        type=\"number\"\n                    />\n                    <Input\n                        name=\"height\"\n                        valRef={register}\n                        label=\"wall height\"\n                        element=\"input\"\n                        type=\"number\"\n                    />\n                    <Input\n                        name=\"walls\"\n                        valRef={register}\n                        label=\"number of walls\"\n                        element=\"input\"\n                        type=\"number\"\n                    /> */}\n\n\n\n\n                    <Input\n                        name=\"storecode\"\n                        valRef={register}\n                        label=\"store code\"\n                        element=\"input\"\n                    />\n\n\n\n                    <Button> submit </Button>\n                </form>\n\n            </div>\n        </React.Fragment>\n    )\n\n}\n\nexport default NewPaint","import React from \"react\"\n\nimport \"./Card.css\"\n\nconst Card = props => {\n    return (\n        <div className={`card ${props.className}`} style={props.style}>\n          {props.children}\n        </div>\n      );\n}\n\nexport default Card","import React, { useState } from \"react\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\nimport Card from \"../../shared/components/UIElements/Card\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport Modal from \"../../shared/components/UIElements/Modal\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\n\nconst PaintItem = (props) => {\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [showConfirmModal, setShowConfirmModal] = useState(false)\n\n    const shoDeleteWarningHandler = () => {\n        setShowConfirmModal(true)\n    }\n\n    const cancelDeleteHandler = () => {\n        setShowConfirmModal(false)\n    }\n\n    const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false);\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/paints/${props.id}`,\n                \"DELETE\"\n\n            )\n            props.onDelete(props.id)\n        } catch (err) {\n\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Modal\n                show={showConfirmModal}\n                onCancel={cancelDeleteHandler}\n                header=\"are you sure?\"\n                footer={\n                    <React.Fragment>\n                        <Button onClick={cancelDeleteHandler}>\n                            cancel\n                        </Button>\n                        <Button onClick={confirmDeleteHandler}>\n                            delete\n                        </Button>\n                    </React.Fragment>\n                }\n            >\n                this cant be undone are you sure?\n            </Modal>\n            <li className=\"paint-list-item\">\n                <Card>\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <div>\n                        <div>\n                            {props.paintname}\n                        </div>\n                        <div>\n                            {props.paintcode}\n                        </div>\n                        <div>\n                            {props.paintbrand}\n                        </div>\n                        <div>\n                            {props.base}\n                        </div>\n                        {/* <div>\n                        {props.room}\n                    </div> */}\n                        <div>\n                            {props.storecode}\n                        </div>\n                    </div>\n                    <Button to={`/paints/${props.id}`}> edit </Button>\n                    <Button onClick={shoDeleteWarningHandler}> delete </Button>\n                </Card>\n            </li>\n        </React.Fragment>\n    )\n}\n\nexport default PaintItem","import React from \"react\"\n\nimport Button from \"../../shared/components/FormElements/Button\"\nimport PaintItem from \"./PaintItem\"\nimport \"./PaintList.css\"\n\nconst PaintList = (props) => {\n\n    if (props.items.length === 0) {\n        return (\n            <div>\n                <h2> no paints found </h2>\n                <Button to=\"/paints/new\"> new </Button>\n            </div>\n        )\n    }\n\n    return (\n        <ul className=\"paint-list\">\n            {\n                props.items.map((paint) => (\n                    <PaintItem\n                        key={paint.id}\n                        id={paint.id}\n                        paintname={paint.paintname}\n                        paintcode={paint.paintcode}\n                        paintbrand={paint.paintbrand}\n                        base={paint.base}\n                        storecode={paint.storecode}\n                        onDelete={props.onDelete}\n                    />\n                ))\n            }\n        </ul>\n    )\n\n\n}\n\nexport default PaintList\n","import React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport PaintList from \"../components/PaintList\"\n\n\nconst Paint = () => {\n\n    const [loadedPaint, setLoadedPaint] = useState()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const userId = useParams().userId\n\n    useEffect(() => {\n        const fetchPaints = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/paints/user/${userId}`\n                )\n                setLoadedPaint(responseData.paints)\n            } catch (err) {\n\n            }\n        }\n        fetchPaints()\n    }, [sendRequest, userId])\n\n    const paintDeleteHandler = (deletedPaintId) => {\n        setLoadedPaint((prevPaints) => prevPaints.filter((paint) => paint.id !== deletedPaintId))\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n\n            {isLoading && (\n                <div className=\"center\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            {!isLoading && loadedPaint && <PaintList items={loadedPaint} onDelete={paintDeleteHandler} />}\n        </React.Fragment>\n    )\n}\n\nexport default Paint\n\n","import React, { useContext, useEffect, useState } from \"react\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport { useForm } from \"react-hook-form\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport Card from \"../../shared/components/UIElements/Card\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport Input from \"../../shared/components/FormElements/Input\"\nimport Button from \"../../shared/components/FormElements/Button\"\nimport \"../../css/style.css\"\n\nconst UpdatePaint = () => {\n\n    const auth = useContext(AuthContext)\n    const paintId = useParams().paintId\n\n    const [loadedPaintname, setLoadedPaintname] = useState()\n    const [loadedPaintcode, setLoadedPaintcode] = useState()\n    const [loadedPaintbrand, setLoadedPaintbrand] = useState()\n    const [loadedBase, setLoadedBase] = useState()\n    const [loadedStorecode, setLoadedStorecode] = useState()\n\n    const { register, handleSubmit } = useForm()\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const history = useHistory()\n\n    useEffect(() => {\n        const fetchPaint = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/paints/${paintId}`\n                )\n                setLoadedPaintname(responseData.paint.paintname)\n                setLoadedPaintcode(responseData.paint.paintcode)\n                setLoadedPaintbrand(responseData.paint.paintbrand)\n                setLoadedBase(responseData.paint.base)\n                setLoadedStorecode(responseData.paint.storecode)\n            } catch (err) {\n\n            }\n        }\n        fetchPaint()\n    }, [sendRequest, paintId])\n\n    const onSubmit = async (data) => {\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/paints/${paintId}`,\n                \"PATCH\",\n                JSON.stringify({\n                    paintname: data.paintname,\n                    paintcode: data.paintcode,\n                    paintbrand: data.paintbrand,\n                    base: data.base,\n                    storecode: data.storecode\n                }),\n                { \"Content-Type\": \"application/json\" }\n            )\n            history.push(\"/\" + auth.userId + \"/paints\")\n        } catch (err) {\n\n        }\n    }\n\n    if (isLoading) {\n        return (\n            <div>\n                <LoadingSpinner />\n            </div>\n        )\n    }\n\n    if (!loadedPaintname && !error) {\n        return (\n            <div>\n                <Card>\n                    <h2> couldnt find paint </h2>\n                </Card>\n            </div>\n        )\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {!isLoading && loadedPaintname && (\n                <Card>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <Input\n                            element=\"input\"\n                            name=\"paintname\"\n                            valRef={register}\n                            label=\"name\"\n                            dv={loadedPaintname}\n                        />\n                        <Input\n                            element=\"input\"\n                            name=\"paintcode\"\n                            valRef={register}\n                            label=\"paint code\"\n                            dv={loadedPaintcode}\n                        />\n                        <Input\n                            element=\"input\"\n                            name=\"paintbrand\"\n                            valRef={register}\n                            label=\"brand\"\n                            dv={loadedPaintbrand}\n                        />\n                        <Input\n                            element=\"input\"\n                            name=\"base\"\n                            valRef={register}\n                            label=\"base\"\n                            dv={loadedBase}\n                        />\n                        <Input\n                            element=\"input\"\n                            name=\"storecode\"\n                            valRef={register}\n                            label=\"store code\"\n                            dv={loadedStorecode}\n                        />\n                        <Button> edit </Button>\n                    </form>\n                </Card>\n            )}\n\n        </React.Fragment>\n    )\n}\n\nexport default UpdatePaint","import React, { useState } from \"react\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport Modal from \"../../shared/components/UIElements/Modal\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\nconst RPItem = (props) => {\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [showConfirmModal, setShowConfirmModal] = useState(false)\n\n    const showDeleteWarningHandler = () => {\n        setShowConfirmModal(true)\n    }\n\n    const cancelDeleteHandler = () => {\n        setShowConfirmModal(false)\n    }\n\n    const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false)\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/receivedpaints/${props.id}`,\n                \"DELETE\"\n            )\n            props.onDelete(props.id)\n        } catch (err) {\n\n        }\n    }\n\n    return (\n\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Modal\n                show={showConfirmModal}\n                onCancel={cancelDeleteHandler}\n                header=\"are you sure?\"\n                footer={\n                    <React.Fragment>\n                        <Button onClick={cancelDeleteHandler}>\n                            cancel\n                        </Button>\n                        <Button onClick={confirmDeleteHandler}>\n                            delete\n                        </Button>\n                    </React.Fragment>\n                }\n            >\n                this cant be undone are you sure?\n            </Modal>\n            <li>\n                <div className=\"receivedpaint__card\">\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <div className=\"receivedpaint__card-text\">\n                        <div>\n                            {props.paintname}\n                        </div>\n                        <div>\n                            {props.paintcode}\n                        </div>\n                        <div>\n                            {props.paintbrand}\n                        </div>\n                        <div>\n                            {props.base}\n                        </div>\n                        <div>\n                            {props.storecode}\n                        </div>\n                        <Button onClick={showDeleteWarningHandler}>\n                            delete\n                        </Button>\n                    </div>\n                </div>\n            </li>\n        </React.Fragment>\n    )\n}\n\nexport default RPItem","import React from \"react\"\nimport RPItem from \"./RPItem\"\n\nimport \"./RPList.css\"\n\nconst RPList = (props) => {\n    if (props.items.length === 0) {\n        return (\n            <div>\n                <h2>no paints found</h2>\n            </div>\n        )\n    }\n\n    return (\n        <ul className=\"paint-list\">\n            {\n                props.items.map((paint) =>\n                    <RPItem\n                        key={paint.id}\n                        id={paint.id}\n                        paintname={paint.paintname}\n                        paintcode={paint.paintcode}\n                        paintbrand={paint.paintbrand}\n                        base={paint.base} storecode={paint.storecode}\n                        onDelete={props.onDelete}\n                    />\n                )\n            }\n        </ul>\n    )\n}\n\nexport default RPList","import React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport RPList from \"../components/RPList\"\n\n\nconst ReceivedPaint = () => {\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [loadedPaint, setLoadedPaint] = useState()\n\n    const userId = useParams().userId\n\n\n    useEffect(() => {\n        const fetchPaints = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/receivedpaints/user/${userId}`\n                )\n                setLoadedPaint(responseData.receivedpaint)\n            } catch (err) {\n\n            }\n        }\n        fetchPaints()\n    }, [sendRequest, userId])\n\n    const paintDeleteHandler = (deletedPaintId) => {\n        setLoadedPaint((prevPaints) => prevPaints.filter((paint) => paint.id !== deletedPaintId))\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {isLoading && (\n                <div className=\"center\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            {!isLoading && loadedPaint && <RPList items={loadedPaint} onDelete={paintDeleteHandler} />}\n        </React.Fragment>\n    )\n\n}\n\nexport default ReceivedPaint","import React, { useContext } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport Input from \"../../shared/components/FormElements/Input\"\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHistory } from \"react-router-dom\"\nimport Button from \"../../shared/components/FormElements/Button\"\nimport \"../../css/style.css\"\n\n\nconst SendPaint = () => {\n\n    const auth = useContext(AuthContext)\n\n    const history = useHistory()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const { register, handleSubmit } = useForm()\n\n\n    const onSubmit = async (data) => {\n\n\n        let rd\n        try {\n            const responseData = await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/users/email\",\n                \"POST\",\n                JSON.stringify({\n                    email: data.email\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n\n            rd = responseData.user[0].id\n\n        } catch (err) {\n\n        }\n\n\n\n        try {\n            await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/sharingpaints\",\n                \"POST\",\n                JSON.stringify({\n                    paintname: data.paintname,\n                    paintcode: data.paintcode,\n                    paintbrand: data.paintbrand,\n                    base: data.base,\n                    storecode: data.storecode,\n                    sender: auth.userId,\n                    receiver: rd\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n\n            )\n\n            history.push(\"/\" + auth.userId + \"/sent\")\n\n\n        } catch (err) {\n\n        }\n\n\n    }\n\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <div className=\"sendpaint__card\">\n                <h2> send paint </h2>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    {isLoading && <LoadingSpinner asOverlay />}\n\n                    <Input\n                        name=\"paintname\"\n                        valRef={register}\n                        label=\"name\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"paintcode\"\n                        valRef={register}\n                        label=\"paint code\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"paintbrand\"\n                        valRef={register}\n                        label=\"brand\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"base\"\n                        valRef={register}\n                        label=\"base\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"storecode\"\n                        valRef={register}\n                        label=\"store code\"\n                        element=\"input\"\n                    />\n                    <Input\n                        name=\"email\"\n                        valRef={register}\n                        label=\"email\"\n                        element=\"input\"\n                    />\n                    <Button> send </Button>\n\n                </form>\n            </div>\n        </React.Fragment>\n    )\n\n\n}\n\nexport default SendPaint","import React, { useState } from \"react\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport Modal from \"../../shared/components/UIElements/Modal\"\nimport \"../../css/style.css\"\n\n\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\nconst SPItem = (props) => {\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [showConfirmModal, setShowConfirmModal] = useState(false)\n\n    const showDeleteWarningHandler = () => {\n        setShowConfirmModal(true)\n    }\n\n    const cancelDeleteHandler = () => {\n        setShowConfirmModal(false)\n    }\n\n    const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false)\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/sentpaints/${props.id}`,\n                \"DELETE\"\n            )\n            props.onDelete(props.id)\n        } catch (err) {\n\n        }\n\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Modal\n                show={showConfirmModal}\n                onCancel={cancelDeleteHandler}\n                header=\"are you sure?\"\n                footer={\n                    <React.Fragment>\n                        <Button onClick={cancelDeleteHandler}>\n                            cancel\n                    </Button>\n                        <Button onClick={confirmDeleteHandler}>\n                            delete\n                    </Button>\n                    </React.Fragment>\n                }\n            >\n                this cant be undone are you sure?\n            </Modal>\n            <li>\n                <div className=\"sentpaint__card\">\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <div className=\"sentpaint__card-text\">\n\n\n                        <div>\n                            <div>\n                                {props.paintname}\n                            </div>\n                            <div>\n                                {props.paintcode === \"\" ? null : props.paintcode}\n                            </div>\n                            <div>\n                                {props.paintbrand === \"\" ? null : props.paintbrand}\n                            </div>\n                            <div>\n                                {props.base === \"\" ? null : props.base}\n                            </div>\n                            <div>\n                                {props.storecode === \"\" ? null : props.storecode}\n                            </div>\n                        </div>\n                        <Button onClick={showDeleteWarningHandler}>\n                            delete\n                        </Button>\n                    </div>\n                </div>\n            </li>\n        </React.Fragment>\n    )\n\n\n\n}\n\nexport default SPItem","import React from \"react\"\n\nimport Button from \"../../shared/components/FormElements/Button\"\nimport SPItem from \"./SPItem\"\n\nconst SPList = (props) => {\n\n    if (props.items.length === 0) {\n        return (\n            <div>\n                <h2> no paints found </h2>\n                <Button to=\"sendpaints/new\"> send paint </Button>\n            </div>\n        )\n    }\n\n    return (\n        <ul>\n            {\n                props.items.map((paint) => (\n                    <SPItem\n                        key={paint.id}\n                        id={paint.id}\n                        paintname={paint.paintname}\n                        paintcode={paint.paintcode}\n                        paintbrand={paint.paintbrand}\n                        base={paint.base}\n                        storecode={paint.storecode}\n                        onDelete={props.onDelete}\n                    />\n                ))\n            }\n        </ul>\n    )\n}\n\nexport default SPList","import React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport SPList from \"../components/SPList\"\nimport '../../css/style.css'\n\nconst SentPaint = () => {\n\n    const [loadedPaint, setLoadedPaint] = useState()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const userId = useParams().userId\n\n    useEffect(() => {\n        const fetchPaints = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/sentpaints/user/${userId}`\n                )\n                setLoadedPaint(responseData.sentpaint)\n            } catch (err) {\n\n            }\n        }\n\n        fetchPaints()\n\n    }, [sendRequest, userId])\n\n    const paintDeleteHandler = (deletedPaintId) => {\n        setLoadedPaint((prevPaints) => prevPaints.filter((paint) => paint.id !== deletedPaintId))\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            {isLoading && (\n                <div className=\"center\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            {!isLoading && loadedPaint && <SPList items={loadedPaint} onDelete={paintDeleteHandler} />}\n        </React.Fragment>\n    )\n}\n\nexport default SentPaint","import React from 'react'\nimport \"../../../css/style.css\"\n\nconst Background = (props) => {\n    return (\n        <div className=\"section-features\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default Background\n","import React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport { AuthContext } from \"../../context/auth-context\"\nimport \"../../../css/style.css\"\n\nconst SassNav = () => {\n\n    const auth = useContext(AuthContext)\n\n\n\n    //document.getElementById('navi-toggle').click()\n\n    const handleClick = () => {\n        document.getElementById('navi-toggle').click();\n        return false;\n    }\n\n\n\n\n\n    return (\n        <div className=\"navigation\">\n            <input type=\"checkbox\" className=\"navigation__checkbox\" id=\"navi-toggle\" />\n            <label for=\"navi-toggle\" className=\"navigation__button\"><span className=\"navigation__icon\"></span></label>\n            <div className=\"navigation__background\"></div>\n            <nav className=\"navigation__nav\">\n                <ul className=\"navigation__list\">\n                    <li className=\"navigation__item\" ><Link to={`/${auth.userId}/paints`} onClick={handleClick} className=\"navigation__link\">saved paint</Link></li>\n                    <li className=\"navigation__item\" ><Link to={`/paints/new`} onClick={handleClick} className=\"navigation__link\">create paint</Link></li>\n                    <li className=\"navigation__item\" ><Link to={`/${auth.userId}/sent`} onClick={handleClick} className=\"navigation__link\">sent paint</Link></li>\n                    <li className=\"navigation__item\" ><Link to={`/send/new`} onClick={handleClick} className=\"navigation__link\">send paint</Link></li>\n                    <li className=\"navigation__item\" ><Link to={`/${auth.userId}/received`} onClick={handleClick} className=\"navigation__link\">received paint</Link></li>\n                    <li className=\"navigation__item\" > <div className=\"navigation__link\" onClick={auth.logout}> logout </div></li>\n                </ul>\n            </nav>\n\n        </div>\n    )\n}\n\nexport default SassNav\n","import React, { useContext } from \"react\"\nimport { useForm } from 'react-hook-form'\nimport \"../../css/style.css\"\n\nimport { Link } from \"react-router-dom\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\nimport Input from \"../../shared/components/FormElements/Input\"\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\n\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\n\nconst Auth = () => {\n    const auth = useContext(AuthContext)\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const { register, handleSubmit } = useForm()\n\n\n\n\n\n    const onSubmit = async (data) => {\n\n\n        try {\n            const responseData = await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n                \"POST\",\n                JSON.stringify({\n                    email: data.login,\n                    password: data.password\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            auth.login(responseData.userId, responseData.token)\n        } catch (err) {\n\n        }\n\n\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n\n            <div className=\"auth__card\">\n                <div className=\"auth__card-text\">\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <div className=\"u-margin-top-small\">\n                        <h2>please login</h2>\n                        <form onSubmit={handleSubmit(onSubmit)}>\n                            <Input\n                                name=\"login\"\n                                valRef={register}\n                                label=\"email\"\n                                element=\"input\"\n                            />\n                            <Input\n                                name=\"password\"\n                                valRef={register}\n                                label=\"password\"\n                                element=\"input\"\n                                type=\"password\"\n                            />\n\n                            <Button type=\"submit\">login</Button>\n                        </form>\n                    did you mean to <Link to=\"/signup\"> signup </Link> <br />\n                    </div>\n                </div>\n\n            </div>\n\n        </React.Fragment>\n    )\n\n}\n\nexport default Auth","import React, { useContext } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { useForm } from \"react-hook-form\"\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\"\n\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\"\nimport Input from \"../../shared/components/FormElements/Input\"\nimport Button from \"../../shared/components/FormElements/Button\"\n\n\n\nconst Signup = () => {\n\n    const auth = useContext(AuthContext)\n\n    const { register, handleSubmit } = useForm()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const onSubmit = async (data) => {\n\n        try {\n            const responseData = await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n                \"POST\",\n                JSON.stringify({\n                    name: data.name,\n                    email: data.email,\n                    password: data.password\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            auth.login(responseData.userId, responseData.token)\n        } catch (err) {\n\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <div className=\"auth__card\">\n                <div className=\"auth__card-text\">\n                    {isLoading && <LoadingSpinner asOverylay />}\n\n                    <h2>signup</h2>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <Input\n                            name=\"name\"\n                            valRef={register}\n                            label=\"name\"\n                            element=\"input\"\n                        />\n                        <Input\n                            name=\"email\"\n                            valRef={register}\n                            label=\"email\"\n                            element=\"input\"\n                        />\n\n                        <Input\n                            name=\"password\"\n                            valRef={register}\n                            label=\"password\"\n                            element=\"input\"\n                            type=\"password\"\n                        />\n                        <Button type=\"submit\">\n                            submit\n                    </Button>\n                    </form>\n                did you mean to <Link to=\"/login\"> login </Link> <br />\n                </div>\n\n            </div>\n        </React.Fragment>\n    )\n\n}\n\nexport default Signup ","import React from \"react\"\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch, Route\n} from \"react-router-dom\"\nimport NewPaint from \"./paints/pages/NewPaint\"\nimport Paint from \"./paints/pages/Paint\"\nimport UpdatePaint from \"./paints/pages/UpdatePaint\"\nimport ReceivedPaint from \"./receivedpaints/pages/ReceivedPaint\"\nimport SendPaint from \"./sendpaints/pages/SendPaint\"\nimport SentPaint from \"./sendpaints/pages/SentPaint\"\nimport Background from \"./shared/components/navigation/Background\"\nimport SassNav from \"./shared/components/navigation/SassNav\"\nimport { AuthContext } from \"./shared/context/auth-context\"\nimport { useAuth } from './shared/hooks/auth-hook';\nimport Auth from \"./user/pages/Auth\"\nimport Signup from \"./user/pages/Signup\"\n\n\nconst App = () => {\n\n  const { token, login, logout, userId } = useAuth();\n\n  let routes\n\n  if (token) {\n    routes = (\n\n      <Switch>\n\n        <Route path=\"/:userId/paints\">\n          <SassNav />\n          <Paint />\n        </Route>\n        <Route path=\"/paints/new\">\n          <SassNav />\n          <NewPaint />\n        </Route>\n\n        <Route path=\"/paints/:paintId\">\n          <SassNav />\n          <UpdatePaint />\n        </Route>\n        <Route path=\"/send/new\">\n          <SassNav />\n          <SendPaint />\n        </Route>\n        <Route path=\"/:userId/sent\">\n          <SassNav />\n          <SentPaint />\n        </Route>\n        <Route path=\"/:userId/received\">\n          <SassNav />\n          <ReceivedPaint />\n        </Route>\n        <Redirect to=\"/paints/new\" />\n      </Switch>\n    )\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Route path=\"/signup\">\n          <Signup />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    )\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn: !!token, token: token, userId: userId, login: login, logout: logout }}\n    >\n      <Router>\n        <Background>\n\n          {routes}\n        </Background>\n      </Router>\n\n    </AuthContext.Provider>\n  )\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}